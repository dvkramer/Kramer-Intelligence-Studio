# my-man-jules/kramer/interfaces.py

import dataclasses
import dataclasses_json
from typing import List, Dict, Literal

# This defines the judgment from the Critic agent.
@dataclasses_json.dataclass_json
@dataclasses.dataclass
class CriticOutput:
  status: Literal["success", "failure"] = "failure"
  justification: str = ""

# This is the primary data object passed between processors.
# It represents a single unit of work in the plan.
@dataclasses_json.dataclass_json
@dataclasses.dataclass
class Task:
  id: str
  description: str
  dependencies: List[str]
  # Populated by the Executor
  result: str | None = None
  # Populated by the Critic
  critic_output: CriticOutput | None = None

# This object represents the full plan generated by the Planner.
@dataclasses_json.dataclass_json
@dataclasses.dataclass
class Plan:
  tasks: List[Task]

# This holds the complete state of the KRAMER process.
# The main agent will manage this object.
@dataclasses.dataclass
class KramerState:
    original_query: str
    plan: Plan | None = None
    # A dictionary mapping task_id to the full Task object
    completed_tasks: Dict[str, Task] = dataclasses.field(default_factory=dict)
    final_report: str | None = None
